Lambda可以方便的定义和创建匿名函数
    语法：[capture list](params list) mutable exception ->return type {function body};
    1.capture list:     捕获外部变量列表
    2.params list:      形参列表
    3.mutable:          用来说是否可以修改捕获变量
    4.exception:        异常设定
    5.return type:      返回类型
    6.function body:    函数体
此外可以省略某成分来声明lambda表达式：
    1.[capture list](params list)->return type {function body};
    2.[capture list](params list){function body};
    3.[capture list]{function body};
    ①:格式1声明了const类型表达式，这种表达式不能修改捕获列表的值
    ②:格式2省略了返回值类型，但编译器可以根据以下规则推断出lambda表达式的返回类型：
        ⑴：如果function body中存在return 语句，则该lambda表达式的返回类型由return语句的返回值确定。
        ⑵：如果function body中没有return 语句，则返回值的为void类型。
    ③:格式3中省略了参数列表，类似普通函数中的无参函数。

#排序:
```C
struct node{
    int a,b;
};
int main(){
    node arr[10];
    arr[0].a=4;
    ....
    arr[8].a=9;
    sort(a,a+9,[](node x,node y)->bool{reurn x.a>y.a;});
}
```
#lambda的返回类型为一个函数指针
```C
int x=3,y=5;
int (*f)(int,int)=[](int x,int y)->int{return x+y;};
cout<<f(x,y)<<endl;
```
#值捕获
```C
int a=123;
auto f=[a]{cout<<a<<endl;};
a=321;
f();///输出123
```
#引用捕获
```c
int a=123;
auto f=[&a]{cout<<a<<endl;};
a=321;
f();///输出321
```
#隐式捕获
```c
int a=123;
auto f=[=]{cout<<a<<endl;};
a=321;
f();///输出123
```
#隐式引用捕获
```c
int a=123;
auto f=[&]{cout<<a<<endl;};
a=321;
f();///输出321
```
#捕获形式               说明
[]                      不捕获任何外部变量
[变量名]                捕获多个变量
[this]                  捕获this指针
[=]                     以值的形式捕获所有外部变量
[&]                     以引用的形式捕获所有外部变量
[=,&x]                  变量x以引用的形式捕获
[&,x]                   只有变量x以值的形式捕获
函数体内不能修改捕获来的值，否则编译器会报错。要想修改通过mutable关键字来修改
```c
int a=123;
auto f=[a]()mutable{++a;};
f();
cout<<a<<endl;///输出124.
c```
表达式参数：
    1.参数列表不能有默认参数
    2.不支持可变参数
    3.所有参数必须有参数名

直接对参数列表初始化不返回函数指针。
int m=[](int x){return x;}(5);///m=5;
