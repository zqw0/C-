static作用：
1.隐藏：
编译多个文件时，所有未加static前缀的全局变量和函数都具有全局可见性。
eg：
//a.c
char a = 'A'; // global variable
void msg()
{
     printf("Hello\n");
}
 
//main.c
 
int main()
{
     extern char a; // extern variable must be declared before use
     printf("%c ", a);
     (void)msg();
     return 0;
}
2.保持变量内容持久
储存在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一一次初始化。
static可以控制变量的可见范围，如果static局部变量在函数内定义，
它的生存期为整个源程序，但其作用域和自动变量相同，只能在定义该
变量的函数内使用该变量，退出函数后，尽管该变量还继续存在，但是不能使用。

3.默认初始化是0

4.类的静态成员函数是属于整个类而非类的对象。

5.不能将静态成员函数定义为虚函数。

6.静态成员和函数可以继承。但是对于静态成员而已，继承过来的
静态成员的值会随父类的静态成员的值变化。且不能初始化。
class a{
public:
    static int te;
    static int fun(){cout<<"111"<<endl;}
};
class b:public a{
public:
};
int a::te=9;//初始化静态成员
int b::te=10;//初始化错误！！！！！
int main(){
    b B;
    b::fun();
    a::te--;
    cout<<b::te<<endl;
    a::te--;
    cout<<b::te<<endl;
}
7.初始化静态成员函数的方法
<数据类型><类名>::<静态数据成员名>=<值>

空悬指针：
指向的对象被销毁，仍然指向这个被销毁的对象。
指针被释放等同与没有被初始化。

野指针：
1.指针没有被初始化
